<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yongtao&#39;s Blog</title>
  
  <subtitle>坚守 无畏 宽容 进取</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-05T12:00:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangyt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解lambda表达式</title>
    <link href="http://yoursite.com/2018/03/05/%E7%90%86%E8%A7%A3lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/05/理解lambda表达式/</id>
    <published>2018-03-05T11:00:00.000Z</published>
    <updated>2018-03-05T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda表达式是Java 8中的新特性，是Java迈入函数式编程的第一步，它不依赖于任何类而被创建，它能像对象一样被传递和按需执行。</p><h2 id="Lambda与单方法接口"><a href="#Lambda与单方法接口" class="headerlink" title="Lambda与单方法接口"></a>Lambda与单方法接口</h2><p>函数式编程常被用于实现事件监听器，事件监听器在java中常被定义为一个接口，该接口通常只有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StateChangeListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChange</span><span class="params">(State oldState, State newState)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个接口定义了一个方法，期望状态发生改变时被调用。</p><a id="more"></a><p>Java 7中，必须实现此接口才能监听状态更改。假设有一个类<code>StateOwner</code>，它能注册状态事件监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateOwner</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStateListener</span><span class="params">(StateChangeListener listener)</span> </span>&#123;</div><div class="line">        <span class="comment">// Add state listener...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Java 7中，可以使用匿名类实现接口添加事件监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">StateOwner stateOwner = <span class="keyword">new</span> StateOwner();</div><div class="line"></div><div class="line">stateOwner.addStateListener(<span class="keyword">new</span> StateChangeListener() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChange</span><span class="params">(State oldState, State newState)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"State changed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>而在Java 8中，可直接使用lambda表达式添加事件监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">StateOwner stateOwner = <span class="keyword">new</span> StateOwner();</div><div class="line"></div><div class="line">stateOwner.addStateListener(</div><div class="line">    (oldState, newState) -&gt; System.out.println(<span class="string">"State changed"</span>)</div><div class="line">);</div></pre></td></tr></table></figure><p>下面一行就是lambda表达式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(oldState, newState) -&gt; System.out.println(<span class="string">"State changed"</span>)</div></pre></td></tr></table></figure><p>lambda表达式与<code>addStateListener()</code>方法参数的参数类型相匹配，如果lambda表达式与参数类型相匹配(本例中为StateChangeListener)，那么lambda表达式将转换为实现与该参数相同的接口的函数。</p><p>Java lambda表达式只能用于与之匹配的类型为单一方法的接口。在上面的例子中，lambda表达式被用作类型为<code>StateChangeListener</code>的方法的参数。<code>StateChangeListener</code>只有一个方法，因此lambda表达式与该接口成功匹配。</p><h3 id="Lambda与接口之间的匹配"><a href="#Lambda与接口之间的匹配" class="headerlink" title="Lambda与接口之间的匹配"></a>Lambda与接口之间的匹配</h3><p>单一方法接口有时候也被称之为函数接口。函数接口匹配lambda分为以下几步：</p><p>确保接口只有一个方法<br>lambda表达式参数匹配函数接口方法参数<br>lambda返回值类型匹配函数接口方法返回值类型</p><h2 id="Lambda-Type-Inference"><a href="#Lambda-Type-Inference" class="headerlink" title="Lambda Type Inference"></a>Lambda Type Inference</h2><p>Before Java 8 you would have to specify what interface to implement, when making anonymous interface implementations. Here is the anonymous interface implementation example from the beginning of this text:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">stateOwner.addStateListener(<span class="keyword">new</span> StateChangeListener() &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChange</span><span class="params">(State oldState, State newState)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something with the old and new state.</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>With lambda expressions the type can often be inferred from the surrounding code. For instance, the interface type of the parameter can be inferred from the method declaration of the addStateListener() method (the single method on the StateChangeListener interface). This is called type inference. The compiler infers the type of a parameter by looking elsewhere for the type - in this case the method definition. Here is the example from the beginning of this text, showing that the StateChangeListener interface is not mentioned in the lambda expression:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">stateOwner.addStateListener(</div><div class="line">    (oldState, newState) -&gt; System.out.println(<span class="string">"State changed"</span>)</div><div class="line">);</div></pre></td></tr></table></figure><p>In the lambda expression the parameter types can often be inferred too. In the example above, the compiler can infer their type from the onStateChange() method declaration. Thus, the type of the parameters oldState and newState are inferred from the method declaration of the onStateChange() method.</p><h2 id="Lambda-Parameters"><a href="#Lambda-Parameters" class="headerlink" title="Lambda Parameters"></a>Lambda Parameters</h2><p>Since Java lambda expressions are effectively just methods, lambda expressions can take parameters just like methods. The (oldState, newState) part of the lambda expression shown earlier specifies the parameters the lambda expression takes. These parameters have to match the parameters of the method on the single method interface. In this case, these parameters have to match the parameters of the onStateChange() method of the StateChangeListener interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChange</span><span class="params">(State oldState, State newState)</span></span>;</div></pre></td></tr></table></figure><p>As a minimum the number of parameters in the lambda expression and the method must match.</p><p>Second, if you have specified any parameter types in the lambda expression, these types must match too. I haven’t shown you how to put types on lambda expression parameters yet (it is shown later in this text), but in many cases you don’t need them.</p><h3 id="Zero-Parameters"><a href="#Zero-Parameters" class="headerlink" title="Zero Parameters"></a>Zero Parameters</h3><p>If the method you are matching your lambda expression against takes no parameters, then you can write your lambda expression like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&gt; System.out.println(<span class="string">"Zero parameter lambda"</span>);</div></pre></td></tr></table></figure><p>Notice how the parentheses have no content in between. That is to signal that the lambda takes no parameters.</p><h3 id="One-Parameters"><a href="#One-Parameters" class="headerlink" title="One Parameters"></a>One Parameters</h3><p>If the method you are matching your Java lambda expression against takes one parameter, you can write the lambda expression like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(param) -&gt; System.out.println(<span class="string">"One parameter: "</span> + param);</div></pre></td></tr></table></figure><p>Notice the parameter is listed inside the parentheses.</p><p>When a lambda expression takes a single parameter, you can also omit the parentheses, like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">param -&gt; System.out.println(<span class="string">"One parameter: "</span> + param);</div></pre></td></tr></table></figure><h3 id="Multiple-Parameters"><a href="#Multiple-Parameters" class="headerlink" title="Multiple Parameters"></a>Multiple Parameters</h3><p>If the method you match your Java lambda expression against takes multiple parameters, the parameters need to be listed inside parentheses. Here is how that looks in Java code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(p1, p2) -&gt; System.out.println(<span class="string">"Multiple parameters: "</span> + p1 + <span class="string">", "</span> + p2);</div></pre></td></tr></table></figure><p>Only when the method takes a single parameter can the parentheses be omitted.</p><h3 id="Parameter-Types"><a href="#Parameter-Types" class="headerlink" title="Parameter Types"></a>Parameter Types</h3><p>Specifying parameter types for a lambda expression may sometimes be necessary if the compiler cannot infer the parameter types from the functional interface method the lambda is matching. Don’t worry, the compiler will tell you when that is the case. Here is a Java lambda parameter type example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(Car car) -&gt; System.out.println(<span class="string">"The car is: "</span> + car.getName());</div></pre></td></tr></table></figure><p>As you can see, the type (Car) of the car parameter is written in front of the parameter name itself, just like you would when declaring a parameter in a method elsewhere, or when making an anonymous implementation of an interface.</p><h2 id="Lambda-Function-Body"><a href="#Lambda-Function-Body" class="headerlink" title="Lambda Function Body"></a>Lambda Function Body</h2><p>The body of a lambda expression, and thus the body of the function / method it represents, is specified to the right of the -&gt; in the lambda declaration: Here is an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(oldState, newState) -&gt; System.out.println(<span class="string">"State changed"</span>)</div></pre></td></tr></table></figure><p>If your lambda expression needs to consist of multiple lines, you can enclose the lambda function body inside the { } bracket which Java also requires when declaring methods elsewhere. Here is an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(oldState, newState) -&gt; &#123;</div><div class="line">   System.out.println(<span class="string">"Old state: "</span> + oldState);</div><div class="line">   System.out.println(<span class="string">"New state: "</span> + newState);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h2 id="Returning-a-Value-From-a-Lambda-Expressions"><a href="#Returning-a-Value-From-a-Lambda-Expressions" class="headerlink" title="Returning a Value From a Lambda Expressions"></a>Returning a Value From a Lambda Expressions</h2><p>You can return values from Java lambda expressions, just like you can from a method. You just add a return statement to the lambda function body, like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(param) -&gt; &#123;</div><div class="line">   System.out.println(<span class="string">"param: "</span> + param);</div><div class="line">   <span class="keyword">return</span> <span class="string">"return value"</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>In case all your lambda expression is doing is to calculate a return value and return it, you can specify the return value in a shorter way. Instead of this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(a1, a2) -&gt; &#123; <span class="keyword">return</span> a1 &gt; a2; &#125;</div></pre></td></tr></table></figure><p>You can write:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(a1, a2) -&gt; a1 &gt; a2;</div></pre></td></tr></table></figure><p>The compiler then figures out that the expression a1 &gt; a2 is the return value of the lambda expression (hence the name lambda expressions - as expressions return a value of some kind).</p><h2 id="Lambdas-as-Objects"><a href="#Lambdas-as-Objects" class="headerlink" title="Lambdas as Objects"></a>Lambdas as Objects</h2><p>A Java lambda expression is essentially an object. You can assign a lambda expression to a variable and pass it around, like you do with any other object. Here is an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyComparator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MyComparator myComparator = (a1, a2) -&gt; <span class="keyword">return</span> a1 &gt; a2;</div><div class="line"></div><div class="line"><span class="keyword">boolean</span> result = myComparator.compare(<span class="number">2</span>, <span class="number">5</span>);</div></pre></td></tr></table></figure><p>The first code block shows the interface which the lambda expression implements. The second code block shows the definition of the lambda expression, how the lambda expression is assigned to variable, and finally how the lambda expression is invoked by invoking the interface method it implements.</p><p>参考资料：<br>1.<a href="http://tutorials.jenkov.com/java/lambda-expressions.html" target="_blank" rel="external">Java Lambda Expressions</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lambda表达式是Java 8中的新特性，是Java迈入函数式编程的第一步，它不依赖于任何类而被创建，它能像对象一样被传递和按需执行。&lt;/p&gt;
&lt;h2 id=&quot;Lambda与单方法接口&quot;&gt;&lt;a href=&quot;#Lambda与单方法接口&quot; class=&quot;headerlink&quot; title=&quot;Lambda与单方法接口&quot;&gt;&lt;/a&gt;Lambda与单方法接口&lt;/h2&gt;&lt;p&gt;函数式编程常被用于实现事件监听器，事件监听器在java中常被定义为一个接口，该接口通常只有一个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StateChangeListener&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onStateChange&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(State oldState, State newState)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个接口定义了一个方法，期望状态发生改变时被调用。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>理解cron表达式</title>
    <link href="http://yoursite.com/2018/03/01/%E7%90%86%E8%A7%A3cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/01/理解cron表达式/</id>
    <published>2018-03-01T03:00:00.000Z</published>
    <updated>2018-03-01T03:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Cron-Expressions"><a href="#A-Cron-Expressions" class="headerlink" title="A Cron Expressions"></a>A Cron Expressions</h2><p>cron表达式形如 <code>0 0 12 * * ?</code> ，由 <code>Seconds</code> <code>Minutes</code> <code>Hours</code> <code>Day of month</code> <code>Month</code> <code>Day of week</code> <code>Year</code> 字段构成，即<code>几秒</code> <code>几分</code> <code>几时</code> <code>几号</code> <code>几月</code> <code>周几</code> <code>哪年</code>。 字段之间使用空格分隔，每个字段可包含任意多个合法的字符。</p><p>Table A-1 Cron Expressions Allowed Fields and Values</p><table><thead><tr><th>Name</th><th style="text-align:center">Required</th><th style="text-align:center">Allowed Values</th><th style="text-align:center">Allowed Special Characters</th></tr></thead><tbody><tr><td>Seconds</td><td style="text-align:center">Y</td><td style="text-align:center">0-59</td><td style="text-align:center">, - * /</td></tr><tr><td>Minutes</td><td style="text-align:center">Y</td><td style="text-align:center">0-59</td><td style="text-align:center">, - * /</td></tr><tr><td>Hours</td><td style="text-align:center">Y</td><td style="text-align:center">0-23</td><td style="text-align:center">, - * /</td></tr><tr><td>Day of month</td><td style="text-align:center">Y</td><td style="text-align:center">1-31</td><td style="text-align:center">, - * ? / L W</td></tr><tr><td>Month</td><td style="text-align:center">Y</td><td style="text-align:center">1-12 or JAN-DEC</td><td style="text-align:center">, - * /</td></tr><tr><td>Day of week</td><td style="text-align:center">Y</td><td style="text-align:center">1-7 or SUN-SAT</td><td style="text-align:center">, - * ? / L #</td></tr><tr><td>Year</td><td style="text-align:center">N</td><td style="text-align:center">empty or 1970-2099</td><td style="text-align:center">, - * /</td></tr></tbody></table><a id="more"></a><h2 id="Special-Characters"><a href="#Special-Characters" class="headerlink" title="Special Characters"></a>Special Characters</h2><p><code>*</code> (“all values”) - 用于表示字段中的所有值。例如，<code>Minutes</code>字段中的“*”意味着每一分钟。</p><p><code>?</code> (“no specific value”) -  不指定特定的值，举个例子，如果我希望我的任务在某月中特定的某天（如第10天）被触发，并且我不关心是星期几被触发，那么我会设置<code>day-of-month</code>字段为<code>10</code>，设置<code>day-of-week</code>字段为<code>?</code></p><p><code>-</code> - 用于指定范围.如<code>hour</code>值为<code>10-12</code> 表示10时，11时，12时。</p><p><code>,</code> - 用于指定附加的值。例如，<code>day-of-week</code>的值为<code>MON,WED,FRI</code>表示星期天，星期三，星期五</p><p><code>/</code> - 用于指定增长。例如，秒字段值为“0/15”表示具体为第0秒，15秒，30秒，45秒的集合，即从第0秒开始，间隔15秒累加。秒字段值为“5/15”表示具体为第5秒，20秒，35秒，50秒的集合，即从第5秒开始，间隔15秒累加。也可以把/写在’’(即空串，没有’’)后面如’/15’,这种情况等价于’0/15’。<code>day-of-month</code>等于<code>1/3</code> 表示从某月的第一天开始，每隔3天触发。</p><p><code>L</code> (“last”) - 指最后，不同的情况有不同的含义，如<code>day-of-month</code>等于“L”表示月中的最后一天。<code>day-of-week</code>等于“L”仅表示7或者SAT。<code>day-of-week</code>等于“6L”表示月中的最后一个周五。也可以从月中的最后一天指定一个偏移量，例如<code>day-of-month</code>等于“L-3”表示月中的倒数第三天。当使用“L”选项时，切记不要指定列表或值的范围，因为可能会得到令人困惑意外的结果。</p><p><code>W</code> (“weekday”) - 用于指定离指定日最近的工作日（星期一至星期五）。例如，如果您要将“15W”指定为<code>day-of-month</code>字段的值，则含义为：“距离本月15日最近的工作日”。因此，如果15日是星期六，触发器将于14日星期五触发。如果15日是星期天，触发器将在16日星期一触发。如果15日是星期二，那么它将在15日星期二触发。 但是，如果您将“1W”指定为<code>day-of-month</code>的值，并且1号是星期六，则触发器将在星期一即3号触发，因为它不能跨越当前月的边界。’W’字符只能在<code>day-of-month</code>是单日而不是日期范围或日期列表时指定。</p><p>L和W字符也能联合使用在<code>day-of-mouth</code>字段中，即<code>LW</code>，它表示月中的最后一个工作日。</p><p><code>#</code> - 用于指定月中的第几天。例如，<code>day-of-week</code>等于“6#3”表示月中的第三个星期五。又如，“2#1” 表示月中的第一个星期一，“4#5”表示月中的第五个星期三。注意如果你指定了“#5”，并且该月的星期不存在5个，则该月不会发生任何触发。</p><p>合法字符串、月份名称、星期名称不区分大小写，MON等价于mon。</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>下面的例子自己理解一下吧~<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Fire at 12:00 PM (noon) every day</span></div><div class="line">0 0 12 * * ?</div><div class="line"><span class="comment"># Fire at 10:15 AM every day</span></div><div class="line">0 15 10 ? * *</div><div class="line"><span class="comment"># Fire at 10:15 AM every day</span></div><div class="line">0 15 10 * * ?</div><div class="line"><span class="comment"># Fire at 10:15 AM every day</span></div><div class="line">0 15 10 * * ? *</div><div class="line"><span class="comment"># Fire at 10:15 AM every day during the year 2005</span></div><div class="line">0 15 10 * * ? 2005</div><div class="line"><span class="comment"># Fire every minute starting at 2:00 PM and ending at 2:59 PM, every day</span></div><div class="line">0 * 14 * * ?</div><div class="line"><span class="comment"># Fire every 5 minutes starting at 2:00 PM and ending at 2:55 PM, every day</span></div><div class="line">0 0/5 14 * * ?</div><div class="line"><span class="comment"># Fire every 5 minutes starting at 2:00 PM and ending at 2:55 PM, AND fire every 5 minutes starting at 6:00 PM and ending at 6:55 PM, every day</span></div><div class="line">0 0/5 14,18 * * ?</div><div class="line"><span class="comment"># Fire every minute starting at 2:00 PM and ending at 2:05 PM, every day</span></div><div class="line">0 0-5 14 * * ?</div><div class="line"><span class="comment"># Fire at 2:10 PM and at 2:44 PM every Wednesday in the month of March</span></div><div class="line">0 10,44 14 ? 3 WED</div><div class="line"><span class="comment"># Fire at 10:15 AM every Monday, Tuesday, Wednesday, Thursday and Friday</span></div><div class="line">0 15 10 ? * MON-FRI</div><div class="line"><span class="comment"># Fire at 10:15 AM on the 15th day of every month</span></div><div class="line">0 15 10 15 * ?</div><div class="line"><span class="comment"># Fire at 10:15 AM on the last day of every month</span></div><div class="line">0 15 10 L * ?</div><div class="line"><span class="comment"># Fire at 10:15 AM on the last Friday of every month</span></div><div class="line">0 15 10 ? * 6L</div><div class="line"><span class="comment"># Fire at 10:15 AM on the last Friday of every month</span></div><div class="line">0 15 10 ? * 6L</div><div class="line"><span class="comment"># Fire at 10:15 AM on every last friday of every month during the years 2002, 2003, 2004, and 2005</span></div><div class="line">0 15 10 ? * 6L 2002-2005</div><div class="line"><span class="comment"># Fire at 10:15 AM on the third Friday of every month</span></div><div class="line">0 15 10 ? * 6<span class="comment">#3</span></div><div class="line"><span class="comment"># Fire at 12 PM (noon) every 5 days every month, starting on the first day of the month</span></div><div class="line">0 0 12 1/5 * ?</div><div class="line"><span class="comment"># Fire every November 11 at 11:11 AM</span></div><div class="line">0 11 11 11 11 ?</div></pre></td></tr></table></figure></p><p>参考资料：<br>1.<a href="https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm" target="_blank" rel="external">Cron Expressions</a><br>2.<a href="http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/crontrigger.html" target="_blank" rel="external">Cron Trigger Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;A-Cron-Expressions&quot;&gt;&lt;a href=&quot;#A-Cron-Expressions&quot; class=&quot;headerlink&quot; title=&quot;A Cron Expressions&quot;&gt;&lt;/a&gt;A Cron Expressions&lt;/h2&gt;&lt;p&gt;cron表达式形如 &lt;code&gt;0 0 12 * * ?&lt;/code&gt; ，由 &lt;code&gt;Seconds&lt;/code&gt; &lt;code&gt;Minutes&lt;/code&gt; &lt;code&gt;Hours&lt;/code&gt; &lt;code&gt;Day of month&lt;/code&gt; &lt;code&gt;Month&lt;/code&gt; &lt;code&gt;Day of week&lt;/code&gt; &lt;code&gt;Year&lt;/code&gt; 字段构成，即&lt;code&gt;几秒&lt;/code&gt; &lt;code&gt;几分&lt;/code&gt; &lt;code&gt;几时&lt;/code&gt; &lt;code&gt;几号&lt;/code&gt; &lt;code&gt;几月&lt;/code&gt; &lt;code&gt;周几&lt;/code&gt; &lt;code&gt;哪年&lt;/code&gt;。 字段之间使用空格分隔，每个字段可包含任意多个合法的字符。&lt;/p&gt;
&lt;p&gt;Table A-1 Cron Expressions Allowed Fields and Values&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Required&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Allowed Values&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Allowed Special Characters&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Seconds&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0-59&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Minutes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0-59&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hours&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0-23&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day of month&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1-31&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;, - * ? / L W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Month&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1-12 or JAN-DEC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day of week&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1-7 or SUN-SAT&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;, - * ? / L #&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Year&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;empty or 1970-2099&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate5.0快速入门</title>
    <link href="http://yoursite.com/2017/12/20/Hibernate5.0%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/12/20/Hibernate5.0快速入门/</id>
    <published>2017-12-20T14:22:00.000Z</published>
    <updated>2017-12-20T15:20:06.542Z</updated>
    
    <content type="html"><![CDATA[<p>参考 <a href="https://docs.jboss.org/hibernate/orm/5.0/userguide/html_single/Hibernate_User_Guide.html" target="_blank" rel="external">Hibernate ORM 5.0 User Guide</a>整理，作为快速入门简明手册。</p><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="https://docs.jboss.org/hibernate/orm/5.0/userguide/html_single/images/architecture/data_access_layers.svg" alt="这里写图片描述"></p><p>如上图所示：java应用利用Hibernate API 来完成 load, store, query等对其领域数据的操作。</p><p>作为JPA的提供者，Hibernate实现了JPA规范，JPA接口和Hibernate具体的实现关系如下图所示：</p><p><img src="https://docs.jboss.org/hibernate/orm/5.0/userguide/html_single/images/architecture/JPA_Hibernate.svg" alt="这里写图片描述"></p><a id="more"></a><p>SessionFactory (<code>org.hibernate.SessionFactory</code>)</p><p>Session实例工厂，一个线程安全的，不可变的代表应用领域模型到一个数据库的映射。<code>EntityManagerFactory</code>在JPA中等价于SessionFactory</p><p>Session (<code>org.hibernate.Session</code>)</p><p>一个单线程，短暂的对象，使用PoEAA《Patterns of Enterprise Application Architecture》中的“Unit of Work”概念设计。</p><p>Transaction (<code>org.hibernate.Transaction</code>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考 &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.0/userguide/html_single/Hibernate_User_Guide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hibernate ORM 5.0 User Guide&lt;/a&gt;整理，作为快速入门简明手册。&lt;/p&gt;
&lt;h2 id=&quot;体系结构&quot;&gt;&lt;a href=&quot;#体系结构&quot; class=&quot;headerlink&quot; title=&quot;体系结构&quot;&gt;&lt;/a&gt;体系结构&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://docs.jboss.org/hibernate/orm/5.0/userguide/html_single/images/architecture/data_access_layers.svg&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示：java应用利用Hibernate API 来完成 load, store, query等对其领域数据的操作。&lt;/p&gt;
&lt;p&gt;作为JPA的提供者，Hibernate实现了JPA规范，JPA接口和Hibernate具体的实现关系如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.jboss.org/hibernate/orm/5.0/userguide/html_single/images/architecture/JPA_Hibernate.svg&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hibernate" scheme="http://yoursite.com/categories/Hibernate/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>理解POJO</title>
    <link href="http://yoursite.com/2017/12/14/%E7%90%86%E8%A7%A3POJOs/"/>
    <id>http://yoursite.com/2017/12/14/理解POJOs/</id>
    <published>2017-12-14T14:43:00.000Z</published>
    <updated>2017-12-16T11:42:57.013Z</updated>
    
    <content type="html"><![CDATA[<p>POJO表示Plain Old Java Object。它是一个java对象的实例，并且不耦合在各种框架扩展中。</p><p>比如，想从JMS中取出消息，你需要编写一个类实现<code>MessageListener</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(((TextMessage) message).getText());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (JMSException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must be of type TextMessage"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这会使你的代码变得不通用，迁移到其他消息中间件实现时会变的困难。如果你的应用使用了大量的监听器，</p><p>那么基于以上的情形选择AMQP或其它方案将变得几乎不可能。</p><p>基于POJO的实现意味着你的消息处理不需实现具体框架的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"myDestination"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processOrder</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    System.out.println(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在这个例子中，你的代码没有直接绑定任何接口。取而代之的是，连接JMS队列的责任被转移到了</p><p>注解中，并且注解更容易更新。当前示例中，你可以用@RabbitListener替换@JmsListener。在其他</p><p>情形下，基于POJO的实现方案可能不使用任何注解。</p><p>这只是一个小例子，它没有对比JMS和Rabbit MQ，而是用以说明代码不绑定接口的意义。通过使用POJO，</p><p>你的代码变得更简单。这样有助于更好的测试，灵活性以及应对以后发生改变的情况。</p><p>Spring及各种组件始终致力于减少代码和类库之间的耦合。这是依赖注入的首要概念，</p><p>即你的服务(指框架组件等)被使用的方式应该是接通应用程序的一部分，而不是服务本身(否则应用和服务发生耦合)。</p><p><a href="https://spring.io/understanding/POJO" target="_blank" rel="external">https://spring.io/understanding/POJO</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;POJO表示Plain Old Java Object。它是一个java对象的实例，并且不耦合在各种框架扩展中。&lt;/p&gt;
&lt;p&gt;比如，想从JMS中取出消息，你需要编写一个类实现&lt;code&gt;MessageListener&lt;/code&gt;接口。&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Windows下noinstallZIP方式配置MySQL5.7</title>
    <link href="http://yoursite.com/2017/11/04/Windows%E4%B8%8BnoinstallZIP%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AEMySQL5.7/"/>
    <id>http://yoursite.com/2017/11/04/Windows下noinstallZIP方式配置MySQL5.7/</id>
    <published>2017-11-04T13:57:00.000Z</published>
    <updated>2017-11-04T14:35:49.560Z</updated>
    
    <content type="html"><![CDATA[<p>参考: <a href="https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html</a></p><h3 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载MySQL</h3><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">https://dev.mysql.com/downloads/mysql/</a> 选择 Windows (x86, 64-bit), ZIP Archive</p><blockquote><p>MySQL Community 5.7 Server requires the Microsoft Visual C++ 2013 Redistributable Package to run on Windows platforms.</p></blockquote><p>MySQL 5.7版本需要安装Microsoft Visual C++ 2013 Redistributable Package</p><p>下载安装: <a href="https://www.microsoft.com/en-us/download/details.aspx?id=40784" target="_blank" rel="external">https://www.microsoft.com/en-us/download/details.aspx?id=40784</a></p><a id="more"></a><h3 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h3><h4 id="1-将下载的MySQL压缩包解压"><a href="#1-将下载的MySQL压缩包解压" class="headerlink" title="1. 将下载的MySQL压缩包解压"></a>1. 将下载的MySQL压缩包解压</h4><p>如<code>D:\dev_app\DB\mysql-5.7.20-winx64</code>目录下，</p><p>将<code>D:\dev_app\DB\mysql-5.7.20-winx64\bin</code> 加入到系统环境变量中</p><p>同时创建数据存储目录如：<code>D:\dev_app\DB\mysql-5.7.20-winx64\data</code></p><h4 id="2-创建配置mysql-ini文件"><a href="#2-创建配置mysql-ini文件" class="headerlink" title="2. 创建配置mysql.ini文件"></a>2. 创建配置mysql.ini文件</h4><blockquote><p>As of MySQL 5.7.18, my-default.ini is no longer included in or installed by distribution packages.</p></blockquote><p>MySQL 5.7.18之后，my-default.ini不在包含在分发包中，我们在<code>D:\dev_app\DB\mysql-5.7.20-winx64</code>目录下自己创建一个my.ini</p><p>内容如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># For advice on how to change settings please see</span></div><div class="line"><span class="comment"># http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html</span></div><div class="line"><span class="comment"># *** DO NOT EDIT THIS FILE. It's a template which will be copied to the</span></div><div class="line"><span class="comment"># *** default location during install, and will be replaced if you</span></div><div class="line"><span class="comment"># *** upgrade to a newer version of MySQL.</span></div><div class="line"></div><div class="line">[mysqld]</div><div class="line"></div><div class="line"><span class="comment"># Remove leading # and set to the amount of RAM for the most important data</span></div><div class="line"><span class="comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span></div><div class="line"><span class="comment"># innodb_buffer_pool_size = 128M</span></div><div class="line"></div><div class="line"><span class="comment"># Remove leading # to turn on a very important data integrity option: logging</span></div><div class="line"><span class="comment"># changes to the binary log between backups.</span></div><div class="line"><span class="comment"># log_bin</span></div><div class="line"></div><div class="line"><span class="comment"># These are commonly set, remove the # and set as required.</span></div><div class="line">basedir=D:\dev_app\DB\mysql-5.7.20-winx64</div><div class="line">datadir=D:\\dev_app\\B\\mysql-5.7.20-winx64\\data</div><div class="line"><span class="comment"># port = .....</span></div><div class="line"><span class="comment"># server_id = .....</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Remove leading # to set options mainly useful for reporting servers.</span></div><div class="line"><span class="comment"># The server defaults are faster for transactions and fast SELECTs.</span></div><div class="line"><span class="comment"># Adjust sizes as needed, experiment to find the optimal values.</span></div><div class="line"><span class="comment"># join_buffer_size = 128M</span></div><div class="line"><span class="comment"># sort_buffer_size = 2M</span></div><div class="line"><span class="comment"># read_rnd_buffer_size = 2M </span></div><div class="line"></div><div class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</div></pre></td></tr></table></figure><h3 id="初始化数据目录"><a href="#初始化数据目录" class="headerlink" title="初始化数据目录"></a>初始化数据目录</h3><p>管理员权限启动CMD, 使用mysqld初始化目录:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;mysqld --defaults-file=D:\dev_app\DB\mysql-5.7.20-winx64\my.ini --initialize</div></pre></td></tr></table></figure></p><p>data目录下会生成一个.err扩展名的文件，打开它，里面会记录生成的MySQL临时密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017-11-03T11:53:18.008877Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: xd<span class="comment">#pZirf&amp;2Gk</span></div></pre></td></tr></table></figure></p><p>执行目录初始化主要完成以下功能：</p><blockquote><ul><li>检查数据目录是否存在</li><li>创建mysql数据库及系统表等</li><li>初始化系统表空间等</li><li>服务器创建’root’@’localhost’ 超级用户帐户和其他保留帐户</li><li>其他</li></ul></blockquote><h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 可以不带console参数，日志写到文件中，不在屏幕上输出</span></div><div class="line">C:\Users\Administrator&gt;mysqld --console</div></pre></td></tr></table></figure><p>启动成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">2017-11-03T12:06:51.583410Z 0 [Note] .\bin\mysqld.exe: ready <span class="keyword">for</span> connections.</div><div class="line">Version: <span class="string">'5.7.20'</span>  socket: <span class="string">''</span>  port: 3306  MySQL Community Server (GPL)</div><div class="line">2017-11-03T12:06:51.583410Z 0 [Note] Executing <span class="string">'SELECT * FROM INFORMATION_SCHEMA</span></div><div class="line">.TABLES;' to get a list of tables using the deprecated partition engine. You may</div><div class="line"> use the startup option <span class="string">'--disable-partition-engine-check'</span> to skip this check.</div><div class="line">2017-11-03T12:06:51.584410Z 0 [Note] Beginning of list of non-natively partition</div><div class="line">ed tables</div><div class="line">2017-11-03T12:06:51.602411Z 0 [Note] End of list of non-natively partitioned tab</div><div class="line">les</div></pre></td></tr></table></figure></p><h3 id="连接到MySQL"><a href="#连接到MySQL" class="headerlink" title="连接到MySQL"></a>连接到MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;mysql -u root -p</div><div class="line">Enter password: ************</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 3</div><div class="line">Server version: 5.7.20</div><div class="line"></div><div class="line">Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure><h4 id="分配一个新的root密码"><a href="#分配一个新的root密码" class="headerlink" title="分配一个新的root密码"></a>分配一个新的root密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure><h3 id="将MySQL作为windows服务"><a href="#将MySQL作为windows服务" class="headerlink" title="将MySQL作为windows服务"></a>将MySQL作为windows服务</h3><p>确保mysql服务停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;mysqladmin -u root -p shutdown</div><div class="line">Enter password: ******</div><div class="line"></div><div class="line"><span class="comment"># another termianl</span></div><div class="line">...</div><div class="line">2017-11-04T13:45:23.331094Z 0 [Note] InnoDB: Buffer pool(s) dump completed at 171104 21:45:23</div><div class="line">2017-11-04T13:45:24.331199Z 0 [Note] InnoDB: Shutdown completed; <span class="built_in">log</span> sequence number 2565405</div><div class="line">2017-11-04T13:45:24.347199Z 0 [Note] InnoDB: Removed temporary tablespace data file: <span class="string">"ibtmp1"</span></div><div class="line">2017-11-04T13:45:24.347199Z 0 [Note] Shutting down plugin <span class="string">'MEMORY'</span></div><div class="line">2017-11-04T13:45:24.347199Z 0 [Note] Shutting down plugin <span class="string">'CSV'</span></div><div class="line">2017-11-04T13:45:24.347199Z 0 [Note] Shutting down plugin <span class="string">'sha256_password'</span></div><div class="line">2017-11-04T13:45:24.347199Z 0 [Note] Shutting down plugin <span class="string">'mysql_native_password'</span></div><div class="line">2017-11-04T13:45:24.347199Z 0 [Note] Shutting down plugin <span class="string">'binlog'</span></div><div class="line">2017-11-04T13:45:24.347199Z 0 [Note] mysqld: Shutdown complete</div></pre></td></tr></table></figure><p>将MySQL Server作为Windows Service自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;mysqld --install</div><div class="line">Service successfully installed.</div></pre></td></tr></table></figure><p>移除MySQL服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;mysqld --remove</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考: &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;下载MySQL&quot;&gt;&lt;a href=&quot;#下载MySQL&quot; class=&quot;headerlink&quot; title=&quot;下载MySQL&quot;&gt;&lt;/a&gt;下载MySQL&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/downloads/mysql/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dev.mysql.com/downloads/mysql/&lt;/a&gt; 选择 Windows (x86, 64-bit), ZIP Archive&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL Community 5.7 Server requires the Microsoft Visual C++ 2013 Redistributable Package to run on Windows platforms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MySQL 5.7版本需要安装Microsoft Visual C++ 2013 Redistributable Package&lt;/p&gt;
&lt;p&gt;下载安装: &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=40784&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.microsoft.com/en-us/download/details.aspx?id=40784&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security SAML 实现SP</title>
    <link href="http://yoursite.com/2017/10/20/Spring%20Security%20SAML%20%E5%AE%9E%E7%8E%B0SP/"/>
    <id>http://yoursite.com/2017/10/20/Spring Security SAML 实现SP/</id>
    <published>2017-10-20T02:56:00.000Z</published>
    <updated>2017-10-21T02:55:42.208Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Security-SAML-实现SP"><a href="#Spring-Security-SAML-实现SP" class="headerlink" title="Spring Security SAML 实现SP"></a>Spring Security SAML 实现SP</h3><h4 id="下载-sample-application"><a href="#下载-sample-application" class="headerlink" title="下载 sample application"></a>下载 sample application</h4><pre><code>https://github.com/spring-projects/spring-security-saml</code></pre><h4 id="配置IDP-metadata"><a href="#配置IDP-metadata" class="headerlink" title="配置IDP metadata"></a>配置IDP metadata</h4><pre><code>修改 /src/main/webapp/WEB-INF/securityContext.xml，告诉系统下载IDP metadata 从给定的url, 超时5s</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"metadata"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.saml.metadata.CachingMetadataManager"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.opensaml.saml2.metadata.provider.HTTPMetadataProvider"</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span> </div><div class="line">          <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span>http://idp.ssocircle.com/idp-meta.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span> </div><div class="line">          <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"parserPool"</span> <span class="attr">ref</span>=<span class="string">"parserPool"</span>/&gt;</span> </div><div class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><h4 id="配置SP-metadata"><a href="#配置SP-metadata" class="headerlink" title="配置SP metadata"></a>配置SP metadata</h4><pre><code>修改  src/main/webapp/WEB-INF/securityContext.xml </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"metadataGeneratorFilter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.saml.metadata.MetadataGeneratorFilter"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.saml.metadata.MetadataGenerator"</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityId"</span> <span class="attr">value</span>=<span class="string">"urn:test:winchannel:beijing"</span>/&gt;</span>  </div><div class="line">      <span class="comment">&lt;!-- 文档中是 &lt;property name="signMetadata" value="false"/&gt;,需改为requestSigned --&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"requestSigned"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="上传SP-metadata到IDP"><a href="#上传SP-metadata到IDP" class="headerlink" title="上传SP metadata到IDP"></a>上传SP metadata到IDP</h4><p>启动项目后,访问<a href="http://localhost/spring-security-saml2-sample/saml/metadata下载生成好的" target="_blank" rel="external">http://localhost/spring-security-saml2-sample/saml/metadata下载生成好的</a> sp metadata，访问 <a href="https://idp.ssocircle.com/sso/UI/Login" target="_blank" rel="external">https://idp.ssocircle.com/sso/UI/Login</a> (建议使用IE，其他浏览器有可能注册不成功) 注册一个新账号，Manage Metadata  -&gt; Add new Service Provider Enter the FQDN of the ServiceProvider :  输入 entityId  urn:test:winchannel:beijing 输入 metadata information。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>访问 <a href="http://localhost/spring-security-saml2-sample/" target="_blank" rel="external">http://localhost/spring-security-saml2-sample/</a> 即被要求跳转到 <a href="https://idp.ssocircle.com/" target="_blank" rel="external">https://idp.ssocircle.com/</a> 认证。</p><blockquote><p>参考: <a href="http://docs.spring.io/spring-security-saml/docs/1.0.0.RELEASE/reference/html/chapter-quick-start.html" target="_blank" rel="external">http://docs.spring.io/spring-security-saml/docs/1.0.0.RELEASE/reference/html/chapter-quick-start.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Security-SAML-实现SP&quot;&gt;&lt;a href=&quot;#Spring-Security-SAML-实现SP&quot; class=&quot;headerlink&quot; title=&quot;Spring Security SAML 实现SP&quot;&gt;&lt;/a&gt;Spring Security SAML 实现SP&lt;/h3&gt;&lt;h4 id=&quot;下载-sample-application&quot;&gt;&lt;a href=&quot;#下载-sample-application&quot; class=&quot;headerlink&quot; title=&quot;下载 sample application&quot;&gt;&lt;/a&gt;下载 sample application&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;https://github.com/spring-projects/spring-security-saml
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;配置IDP-metadata&quot;&gt;&lt;a href=&quot;#配置IDP-metadata&quot; class=&quot;headerlink&quot; title=&quot;配置IDP metadata&quot;&gt;&lt;/a&gt;配置IDP metadata&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;修改 /src/main/webapp/WEB-INF/securityContext.xml，告诉系统下载IDP metadata 从给定的url, 超时5s
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;metadata&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;org.springframework.security.saml.metadata.CachingMetadataManager&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;org.opensaml.saml2.metadata.provider.HTTPMetadataProvider&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;java.lang.String&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;http://idp.ssocircle.com/idp-meta.xml&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;int&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;5000&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parserPool&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parserPool&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="WEB技术" scheme="http://yoursite.com/categories/WEB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Security" scheme="http://yoursite.com/tags/Spring-Security/"/>
    
      <category term="SAML" scheme="http://yoursite.com/tags/SAML/"/>
    
  </entry>
  
  <entry>
    <title>Redis安装</title>
    <link href="http://yoursite.com/2017/10/16/Redis%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2017/10/16/Redis安装/</id>
    <published>2017-10-16T14:27:00.000Z</published>
    <updated>2017-10-21T07:55:37.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost src] wget http://download.redis.io/releases/redis-4.0.2.tar.gz</div><div class="line">[root@localhost src] tar xzf redis-4.0.2.tar.gz</div><div class="line">[root@localhost src] <span class="built_in">cd</span> redis-4.0.2</div><div class="line">[root@localhost src] make</div></pre></td></tr></table></figure><a id="more"></a><h3 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@localhost src]<span class="comment"># pwd</span></div><div class="line">/usr/<span class="built_in">local</span>/src/redis-4.0.1/src</div><div class="line">[root@localhost src]<span class="comment"># ./redis-server </span></div><div class="line">3163:C 12 Jul 04:23:15.614 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></div><div class="line">3163:C 12 Jul 04:23:15.614 <span class="comment"># Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=3163, just started</span></div><div class="line">3163:C 12 Jul 04:23:15.614 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use ./redis-server /path/to/redis.conf</span></div><div class="line">3163:M 12 Jul 04:23:15.615 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</div><div class="line">                _._                                                  </div><div class="line">           _.-``__ <span class="string">''</span>-._                                             </div><div class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 4.0.1 (00000000/0) 64 bit</div><div class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </div><div class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></div><div class="line"> |`-._`-...-` __...-.``-._|'` _.-<span class="string">'|     Port: 6379</span></div><div class="line"> |    `-._   `._    /     _.-'    |     PID: 3163</div><div class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </div><div class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></div><div class="line"> |    `-._`-._        _.-'_.-<span class="string">'    |           http://redis.io        </span></div><div class="line">  `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span>                                   </div><div class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></div><div class="line"> |    `-._`-._        _.-'_.-<span class="string">'    |                                  </span></div><div class="line">  `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span>                                   </div><div class="line">      `-._    `-.__.-<span class="string">'    _.-'</span>                                       </div><div class="line">          `-._        _.-<span class="string">'                                           </span></div><div class="line">              `-.__.-'                                               </div><div class="line"></div><div class="line">3163:M 12 Jul 04:23:15.616 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></div><div class="line">3163:M 12 Jul 04:23:15.616 <span class="comment"># Server initialized</span></div><div class="line">3163:M 12 Jul 04:23:15.616 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span></div><div class="line">3163:M 12 Jul 04:23:15.616 <span class="comment"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></div><div class="line">3163:M 12 Jul 04:23:15.616 * DB loaded from disk: 0.000 seconds</div><div class="line">3163:M 12 Jul 04:23:15.616 * Ready to accept connections</div></pre></td></tr></table></figure><h3 id="通过内建的客户端和Redis交互"><a href="#通过内建的客户端和Redis交互" class="headerlink" title="通过内建的客户端和Redis交互"></a>通过内建的客户端和Redis交互</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost src] ./redis-cli</div><div class="line">redis&gt; <span class="built_in">set</span> foo bar</div><div class="line">OK</div><div class="line">redis&gt; get foo</div><div class="line"><span class="string">"bar"</span></div></pre></td></tr></table></figure><h3 id="远程连接配置"><a href="#远程连接配置" class="headerlink" title="远程连接配置"></a>远程连接配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost src]<span class="comment"># pwd</span></div><div class="line">/usr/<span class="built_in">local</span>/src/redis-4.0.1/src</div><div class="line">[root@localhost src]<span class="comment"># vim ../redis.conf</span></div><div class="line"></div><div class="line"><span class="comment"># 设置密码为123456</span></div><div class="line">requirepass 123456</div><div class="line"></div><div class="line">[root@localhost src]<span class="comment"># ./redis-server ../redis.conf</span></div></pre></td></tr></table></figure><h4 id="客户端远程连接"><a href="#客户端远程连接" class="headerlink" title="客户端远程连接"></a>客户端远程连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS E:\dev_app\Redis-x64-3.0.504&gt; .\redis-cli.exe -h 192.168.80.129 -p 6379 -a <span class="string">"123456"</span></div></pre></td></tr></table></figure><p>Ref: <a href="https://redis.io/download" target="_blank" rel="external">https://redis.io/download</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Redis&quot;&gt;&lt;a href=&quot;#安装Redis&quot; class=&quot;headerlink&quot; title=&quot;安装Redis&quot;&gt;&lt;/a&gt;安装Redis&lt;/h2&gt;&lt;h3 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost src] wget http://download.redis.io/releases/redis-4.0.2.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost src] tar xzf redis-4.0.2.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost src] &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; redis-4.0.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost src] make&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="缓存" scheme="http://yoursite.com/categories/%E7%BC%93%E5%AD%98/"/>
    
      <category term="Redis" scheme="http://yoursite.com/categories/%E7%BC%93%E5%AD%98/Redis/"/>
    
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>学习资源</title>
    <link href="http://yoursite.com/2017/10/15/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    <id>http://yoursite.com/2017/10/15/学习资源/</id>
    <published>2017-10-15T13:23:00.000Z</published>
    <updated>2017-10-17T13:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>学过或正在学习的不错的教程，整理中…</p><p><a href="http://www.imooc.com/learn/9" target="_blank" rel="external">html&amp;css基础</a><br><a href="http://www.imooc.com/learn/36" target="_blank" rel="external">javascript入门</a><br><a href="http://www.imooc.com/learn/10" target="_blank" rel="external">javascript进阶</a><br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">javascript廖雪峰</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Tools" target="_blank" rel="external">Firefox开发者工具</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a><br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程</a><br><a href="http://www.yiibai.com/redis/" target="_blank" rel="external">redis入门</a><br><a href="http://www.w3school.com.cn/sql/index.asp" target="_blank" rel="external">标准SQL语法</a><br><a href="https://www.zybuluo.com/yangfch3/note/338252" target="_blank" rel="external">Windows批处理</a><br><a href="http://www.apelearn.com/study_v2/" target="_blank" rel="external">跟阿铭学Linux V2</a><br><a href="http://wiki.jikexueyuan.com/project/docker-technology-and-combat/" target="_blank" rel="external">Docker从入门到实践</a><br><a href="http://www.pstips.net/powershell-online-tutorials/" target="_blank" rel="external">PowerShell在线教程</a><br><a href="https://gitee.com/didispace/SpringBoot-Learning" target="_blank" rel="external">Springboot</a><br><a href="http://wiki.jikexueyuan.com/project/elasticsearch-definitive-guide-cn/" target="_blank" rel="external">ElasticSearch</a><br><a href="https://docs.spring.io/spring-boot/docs/1.5.8.RELEASE/reference/htmlsingle/" target="_blank" rel="external">Spring boot 1.5.8 reference</a><br><a href="https://docs.jboss.org/hibernate/orm/5.0/userguide/html_single/Hibernate_User_Guide.html" target="_blank" rel="external">Hibernate 5.0 User Guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学过或正在学习的不错的教程，整理中…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.imooc.com/learn/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html&amp;amp;css基础&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www
      
    
    </summary>
    
      <category term="学习资源" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Oracle Scott表MySQL 版本</title>
    <link href="http://yoursite.com/2017/10/09/Oracle%20Scott%E8%A1%A8MySQL%20%E7%89%88%E6%9C%AC/"/>
    <id>http://yoursite.com/2017/10/09/Oracle Scott表MySQL 版本/</id>
    <published>2017-10-09T05:36:20.000Z</published>
    <updated>2017-10-17T15:14:19.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Oracle-Scott表MySQL-版本"><a href="#Oracle-Scott表MySQL-版本" class="headerlink" title="Oracle Scott表MySQL 版本"></a>Oracle Scott表MySQL 版本</h2><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>涉及bonus  dept  emp  salgrade几张表，可以作为SQL学习测试的Demo表.</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">Navicat MySQL Data Transfer</div><div class="line"></div><div class="line">Source Server         : localhost</div><div class="line">Source Server Version : 50173</div><div class="line">Source Host           : 192.168.91.129:3306</div><div class="line">Source Database       : oracle_scott</div><div class="line"></div><div class="line">Target Server Type    : MYSQL</div><div class="line">Target Server Version : 50173</div><div class="line">File Encoding         : 65001</div><div class="line"></div><div class="line">Date: 2017-10-09 13:29:54</div><div class="line">*/</div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for bonus</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`bonus`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`bonus`</span> (</div><div class="line">  <span class="string">`ename`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`job`</span> <span class="built_in">varchar</span>(<span class="number">9</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`sal`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`comm`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of bonus</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for dept</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`dept`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept`</span> (</div><div class="line">  <span class="string">`deptno`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`dname`</span> <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`loc`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`deptno`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">41</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of dept</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`dept`</span> <span class="keyword">VALUES</span> (<span class="string">'10'</span>, <span class="string">'ACCOUNTING'</span>, <span class="string">'NEW YORK'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`dept`</span> <span class="keyword">VALUES</span> (<span class="string">'20'</span>, <span class="string">'RESEARCH'</span>, <span class="string">'DALLAS'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`dept`</span> <span class="keyword">VALUES</span> (<span class="string">'30'</span>, <span class="string">'SALES'</span>, <span class="string">'CHICAGO'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`dept`</span> <span class="keyword">VALUES</span> (<span class="string">'40'</span>, <span class="string">'OPERATIONS'</span>, <span class="string">'BOSTON'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for emp</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`emp`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`emp`</span> (</div><div class="line">  <span class="string">`empno`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`ename`</span> <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`job`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`mgr`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`hiredate`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`sal`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`comm`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`deptno`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`empno`</span>),</div><div class="line">  <span class="keyword">KEY</span> <span class="string">`deptno`</span> (<span class="string">`deptno`</span>) <span class="keyword">USING</span> BTREE,</div><div class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`emp_ibfk_1`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`deptno`</span>) <span class="keyword">REFERENCES</span> <span class="string">`dept`</span> (<span class="string">`deptno`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">7935</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of emp</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7369'</span>, <span class="string">'SMITH'</span>, <span class="string">'CLERK'</span>, <span class="string">'7902'</span>, <span class="string">'1980-12-17'</span>, <span class="string">'800.00'</span>, <span class="literal">null</span>, <span class="string">'20'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7499'</span>, <span class="string">'ALLEN'</span>, <span class="string">'SALESMAN'</span>, <span class="string">'7698'</span>, <span class="string">'1981-02-20'</span>, <span class="string">'1600.00'</span>, <span class="string">'300.00'</span>, <span class="string">'30'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7521'</span>, <span class="string">'WARD'</span>, <span class="string">'SALESMAN'</span>, <span class="string">'7698'</span>, <span class="string">'1981-02-22'</span>, <span class="string">'1250.00'</span>, <span class="string">'500.00'</span>, <span class="string">'30'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7566'</span>, <span class="string">'JONES'</span>, <span class="string">'MANAGER'</span>, <span class="string">'7839'</span>, <span class="string">'1981-04-02'</span>, <span class="string">'2975.00'</span>, <span class="literal">null</span>, <span class="string">'20'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7654'</span>, <span class="string">'MARTIN'</span>, <span class="string">'SALESMAN'</span>, <span class="string">'7698'</span>, <span class="string">'1981-09-28'</span>, <span class="string">'1250.00'</span>, <span class="string">'1400.00'</span>, <span class="string">'30'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7698'</span>, <span class="string">'BLAKE'</span>, <span class="string">'MANAGER'</span>, <span class="string">'7839'</span>, <span class="string">'1981-05-01'</span>, <span class="string">'2850.00'</span>, <span class="literal">null</span>, <span class="string">'30'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7782'</span>, <span class="string">'CLARK'</span>, <span class="string">'MANAGER'</span>, <span class="string">'7839'</span>, <span class="string">'1981-06-09'</span>, <span class="string">'2450.00'</span>, <span class="literal">null</span>, <span class="string">'10'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7788'</span>, <span class="string">'SCOTT'</span>, <span class="string">'ANALYST'</span>, <span class="string">'7566'</span>, <span class="string">'1987-07-13'</span>, <span class="string">'3000.00'</span>, <span class="literal">null</span>, <span class="string">'20'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7839'</span>, <span class="string">'KING'</span>, <span class="string">'PRESIDENT'</span>, <span class="literal">null</span>, <span class="string">'1981-11-17'</span>, <span class="string">'5000.00'</span>, <span class="literal">null</span>, <span class="string">'10'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7844'</span>, <span class="string">'TURNER'</span>, <span class="string">'SALESMAN'</span>, <span class="string">'7698'</span>, <span class="string">'1981-09-08'</span>, <span class="string">'1500.00'</span>, <span class="string">'0.00'</span>, <span class="string">'30'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7876'</span>, <span class="string">'ADAMS'</span>, <span class="string">'CLERK'</span>, <span class="string">'7788'</span>, <span class="string">'1987-07-13'</span>, <span class="string">'1100.00'</span>, <span class="literal">null</span>, <span class="string">'20'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7900'</span>, <span class="string">'JAMES'</span>, <span class="string">'CLERK'</span>, <span class="string">'7698'</span>, <span class="string">'1981-12-03'</span>, <span class="string">'950.00'</span>, <span class="literal">null</span>, <span class="string">'30'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7902'</span>, <span class="string">'FORD'</span>, <span class="string">'ANALYST'</span>, <span class="string">'7566'</span>, <span class="string">'1981-12-03'</span>, <span class="string">'3000.00'</span>, <span class="literal">null</span>, <span class="string">'20'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7934'</span>, <span class="string">'MILLER'</span>, <span class="string">'CLERK'</span>, <span class="string">'7782'</span>, <span class="string">'1982-01-23'</span>, <span class="string">'1300.00'</span>, <span class="literal">null</span>, <span class="string">'10'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for salgrade</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`salgrade`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salgrade`</span> (</div><div class="line">  <span class="string">`grade`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`losal`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`hisal`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of salgrade</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salgrade`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'700'</span>, <span class="string">'1200'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salgrade`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'1201'</span>, <span class="string">'1400'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salgrade`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'1401'</span>, <span class="string">'2000'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salgrade`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'2001'</span>, <span class="string">'3000'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`salgrade`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'3001'</span>, <span class="string">'9999'</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Oracle-Scott表MySQL-版本&quot;&gt;&lt;a href=&quot;#Oracle-Scott表MySQL-版本&quot; class=&quot;headerlink&quot; title=&quot;Oracle Scott表MySQL 版本&quot;&gt;&lt;/a&gt;Oracle Scott表MySQL 版本&lt;/h2&gt;&lt;h3 id=&quot;表&quot;&gt;&lt;a href=&quot;#表&quot; class=&quot;headerlink&quot; title=&quot;表&quot;&gt;&lt;/a&gt;表&lt;/h3&gt;&lt;p&gt;涉及bonus  dept  emp  salgrade几张表，可以作为SQL学习测试的Demo表.&lt;/p&gt;
&lt;h3 id=&quot;脚本&quot;&gt;&lt;a href=&quot;#脚本&quot; class=&quot;headerlink&quot; title=&quot;脚本&quot;&gt;&lt;/a&gt;脚本&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Navicat MySQL Data Transfer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Source Server         : localhost&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Source Server Version : 50173&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Source Host           : 192.168.91.129:3306&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Source Database       : oracle_scott&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Target Server Type    : MYSQL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Target Server Version : 50173&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;File Encoding         : 65001&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Date: 2017-10-09 13:29:54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装Mysql</title>
    <link href="http://yoursite.com/2017/08/21/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Mysql/"/>
    <id>http://yoursite.com/2017/08/21/Linux下安装Mysql/</id>
    <published>2017-08-21T15:52:00.000Z</published>
    <updated>2017-11-03T08:44:36.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># uname -a      </span></div><div class="line">Linux localhost.localdomain 2.6.32-504.el6.x86_64 <span class="comment">#1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</span></div><div class="line">[root@localhost ~]<span class="comment"># cat /etc/issue</span></div><div class="line">CentOS release 6.6 (Final)</div><div class="line">Kernel \r on an \m</div></pre></td></tr></table></figure><h3 id="查看当前系统是否已经安装Mysql"><a href="#查看当前系统是否已经安装Mysql" class="headerlink" title="查看当前系统是否已经安装Mysql"></a>查看当前系统是否已经安装Mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># yum list installed | grep mysql</span></div><div class="line">mysql.x86_64            5.1.73-8.el6_8  @base</div></pre></td></tr></table></figure><h3 id="删除自带Mysql"><a href="#删除自带Mysql" class="headerlink" title="删除自带Mysql"></a>删除自带Mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># yum -y remove mysql.x86_64</span></div></pre></td></tr></table></figure><h3 id="查看yum库上mysql版本"><a href="#查看yum库上mysql版本" class="headerlink" title="查看yum库上mysql版本"></a>查看yum库上mysql版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># yum list | grep mysql</span></div><div class="line">mysql.x86_64                               5.1.73-8.el6_8                @base  </div><div class="line">mysql-devel.x86_64                         5.1.73-8.el6_8                @base  </div><div class="line">mysql-libs.x86_64                          5.1.73-8.el6_8                @base  </div><div class="line">mysql-server.x86_64                        5.1.73-8.el6_8                @base  </div><div class="line">...</div></pre></td></tr></table></figure><a id="more"></a><h3 id="yum安装Mysql"><a href="#yum安装Mysql" class="headerlink" title="yum安装Mysql"></a>yum安装Mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># yum -y install mysql-server mysql mysql-devel</span></div></pre></td></tr></table></figure><h3 id="查看安装后的Mysql信息"><a href="#查看安装后的Mysql信息" class="headerlink" title="查看安装后的Mysql信息"></a>查看安装后的Mysql信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># rpm -qi mysql-server</span></div><div class="line">Name        : mysql-server                 Relocations: (not relocatable)</div><div class="line">Version     : 5.1.73                            Vendor: CentOS</div><div class="line">Release     : 8.el6_8                       Build Date: Fri 27 Jan 2017 06:25:43 AM CST</div><div class="line">Install Date: Mon 03 Jul 2017 12:53:49 AM CST      Build Host: c1bm.rdu2.centos.org</div><div class="line">Group       : Applications/Databases        Source RPM: mysql-5.1.73-8.el6_8.src.rpm</div><div class="line">Size        : 25884131                         License: GPLv2 with exceptions</div><div class="line">Signature   : RSA/SHA1, Fri 27 Jan 2017 06:35:28 AM CST, Key ID 0946fca2c105b9de</div><div class="line">Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</div><div class="line">URL         : http://www.mysql.com</div><div class="line">Summary     : The MySQL server and related files</div><div class="line">Description :</div><div class="line">MySQL is a multi-user, multi-threaded SQL database server. MySQL is a</div><div class="line">client/server implementation consisting of a server daemon (mysqld)</div><div class="line">and many different client programs and libraries. This package contains</div><div class="line">the MySQL server and some accompanying files and directories.</div></pre></td></tr></table></figure><h2 id="禁用linux防火墙"><a href="#禁用linux防火墙" class="headerlink" title="禁用linux防火墙"></a>禁用linux防火墙</h2><h3 id="禁用selinux"><a href="#禁用selinux" class="headerlink" title="禁用selinux"></a>禁用selinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat /etc/selinux/config</span></div><div class="line"></div><div class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></div><div class="line"><span class="comment"># SELINUX= can take one of these three values:</span></div><div class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></div><div class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></div><div class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></div><div class="line">SELINUX=disabled <span class="comment"># 禁用selinux修改后需要重启</span></div><div class="line"><span class="comment"># SELINUXTYPE= can take one of these two values:</span></div><div class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></div><div class="line"><span class="comment">#     mls - Multi Level Security protection.</span></div><div class="line">SELINUXTYPE=targeted</div></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><h4 id="暂时关闭"><a href="#暂时关闭" class="headerlink" title="暂时关闭"></a>暂时关闭</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># service iptables stop</span></div></pre></td></tr></table></figure><h4 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a>永久关闭</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># chkconfig iptables off</span></div></pre></td></tr></table></figure><h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><p>####<br>设置Mysql服务开机启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat /etc/rc.local    </span></div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This script will be executed *after* all the other init scripts.</span></div><div class="line"><span class="comment"># You can put your own initialization stuff in here if you don't</span></div><div class="line"><span class="comment"># want to do the full Sys V style init stuff.</span></div><div class="line"></div><div class="line">touch /var/lock/subsys/<span class="built_in">local</span></div><div class="line">service mysqld start</div></pre></td></tr></table></figure></p><h4 id="查看MySQL脚本信息"><a href="#查看MySQL脚本信息" class="headerlink" title="查看MySQL脚本信息"></a>查看MySQL脚本信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select version();</div><div class="line">+-----------+</div><div class="line">| version() |</div><div class="line">+-----------+</div><div class="line">| 5.1.73    |</div><div class="line">+-----------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span></div><div class="line"></div><div class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">"%version%"</span>;</div><div class="line">+-------------------------+---------------------+</div><div class="line">| Variable_name           | Value               |</div><div class="line">+-------------------------+---------------------+</div><div class="line">| protocol_version        | 10                  |</div><div class="line">| version                 | 5.1.73              |</div><div class="line">| version_comment         | Source distribution |</div><div class="line">| version_compile_machine | x86_64              |</div><div class="line">| version_compile_os      | redhat-linux-gnu    |</div><div class="line">+-------------------------+---------------------+</div><div class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span></div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Mysql&quot;&gt;&lt;a href=&quot;#安装Mysql&quot; class=&quot;headerlink&quot; title=&quot;安装Mysql&quot;&gt;&lt;/a&gt;安装Mysql&lt;/h2&gt;&lt;h3 id=&quot;系统信息&quot;&gt;&lt;a href=&quot;#系统信息&quot; class=&quot;headerlink&quot; title=&quot;系统信息&quot;&gt;&lt;/a&gt;系统信息&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost ~]&lt;span class=&quot;comment&quot;&gt;# uname -a      &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Linux localhost.localdomain 2.6.32-504.el6.x86_64 &lt;span class=&quot;comment&quot;&gt;#1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost ~]&lt;span class=&quot;comment&quot;&gt;# cat /etc/issue&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CentOS release 6.6 (Final)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Kernel \r on an \m&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;查看当前系统是否已经安装Mysql&quot;&gt;&lt;a href=&quot;#查看当前系统是否已经安装Mysql&quot; class=&quot;headerlink&quot; title=&quot;查看当前系统是否已经安装Mysql&quot;&gt;&lt;/a&gt;查看当前系统是否已经安装Mysql&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost ~]&lt;span class=&quot;comment&quot;&gt;# yum list installed | grep mysql&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql.x86_64            5.1.73-8.el6_8  @base&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;删除自带Mysql&quot;&gt;&lt;a href=&quot;#删除自带Mysql&quot; class=&quot;headerlink&quot; title=&quot;删除自带Mysql&quot;&gt;&lt;/a&gt;删除自带Mysql&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost ~]&lt;span class=&quot;comment&quot;&gt;# yum -y remove mysql.x86_64&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;查看yum库上mysql版本&quot;&gt;&lt;a href=&quot;#查看yum库上mysql版本&quot; class=&quot;headerlink&quot; title=&quot;查看yum库上mysql版本&quot;&gt;&lt;/a&gt;查看yum库上mysql版本&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost ~]&lt;span class=&quot;comment&quot;&gt;# yum list | grep mysql&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql.x86_64                               5.1.73-8.el6_8                @base  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql-devel.x86_64                         5.1.73-8.el6_8                @base  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql-libs.x86_64                          5.1.73-8.el6_8                @base  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql-server.x86_64                        5.1.73-8.el6_8                @base  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Nonce与重放攻击</title>
    <link href="http://yoursite.com/2017/07/25/Nonce%E4%B8%8E%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2017/07/25/Nonce与重放攻击/</id>
    <published>2017-07-25T12:42:00.000Z</published>
    <updated>2017-10-17T15:13:50.553Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>重放攻击（Replay attack）是一种网络攻击，它恶意的欺诈性的重复或拖延正常的数据传输。    —— <a href="https://en.wikipedia.org/wiki/Replay_attack" target="_blank"> [ Wikipedia ]</a></p></blockquote><p>使用签名认证方式设计的RESTFul API，当请求信息被第三方拦截之后，由于其含有认证信息，当再次发起该请求时，如果没有相应的保护机制，请求会再次通过验证，造成重放攻击的风险。</p><p>为避免该问题，通常情况下的做法是：</p><blockquote><p>每次发起HTTP请求，都需要加上timestamp参数，然后把timestamp和其他参数一起进行签名。服务端接收到HTTP请求后，将客户端timestamp与服务端当前时间比较，判断是否超过了请求有效期，比如60s，如果超过了则认为是非法的请求。</p></blockquote><p>如此一来从第一次请求发起的时间算起，60s之后再访问时会被服务端拒绝，但是在60s有效期内，依然可以发起重放攻击。</p><p>解决方案：</p><ol><li>客户端生成一个随机字符串Nonce (Number used once), 并且参与签名</li><li>服务端第一次接收到请求，去缓存中查询Nonce是否存在<ol><li>如果不存在，则认为在有效期内该请求第一次访问，放行；然后将Nonce保存在缓存中，并设置有效期为60s，60s之后该Nonce缓存失效被清除</li><li>如果存在，则认为在有效期内该请求Replay，拒绝提供访问</li></ol></li></ol><p>需要保证的是有效期内并发请求生成随机数的唯一性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;重放攻击（Replay attack）是一种网络攻击，它恶意的欺诈性的重复或拖延正常的数据传输。    —— &lt;a href=&quot;https://en.wikipedia.org/wiki/Replay_attack&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="WEB技术" scheme="http://yoursite.com/categories/WEB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题整理 [doing]</title>
    <link href="http://yoursite.com/2017/07/18/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/07/18/Java面试题整理/</id>
    <published>2017-07-18T06:45:00.000Z</published>
    <updated>2017-10-17T15:18:58.155Z</updated>
    
    <content type="html"><![CDATA[<hr><p>请画出a，b，c，d内存分布图<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] a = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</div><div class="line"><span class="keyword">int</span>[] b = &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</div><div class="line"><span class="keyword">int</span>[] c = &#123; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</div><div class="line"><span class="keyword">int</span>[][] d = &#123; a, b, c &#125;;</div></pre></td></tr></table></figure></p><hr><a id="more"></a><p>判断输出结果，并画图解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</div><div class="line"></div><div class="line">  String str = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</div><div class="line">  <span class="keyword">char</span>[] ch = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">     Example ex = <span class="keyword">new</span> Example();</div><div class="line">     ex.change(ex.str, ex.ch);</div><div class="line">     System.out.println(ex.str);</div><div class="line">     System.out.println(ex.ch);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, <span class="keyword">char</span>[] ch)</span></span>&#123;</div><div class="line">     str= <span class="string">"hi"</span>;</div><div class="line">     ch[<span class="number">1</span>]= <span class="string">'h'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>类变量a，b有什么区别<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">3</span>;</div><div class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">5</span>;</div></pre></td></tr></table></figure></p><hr><p>哪些操作是原子性操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">10</span>;         <span class="comment">//语句1</span></div><div class="line">y = x;          <span class="comment">//语句2</span></div><div class="line">x++;            <span class="comment">//语句3</span></div><div class="line">x = x + <span class="number">1</span>;      <span class="comment">//语句4</span></div></pre></td></tr></table></figure></p><hr><p>判断输出结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        String a = <span class="string">"hello2"</span>; </div><div class="line">        <span class="keyword">final</span> String b = <span class="string">"hello"</span>;</div><div class="line">        String d = <span class="string">"hello"</span>;</div><div class="line">        String c = b + <span class="number">2</span>; </div><div class="line">        String e = d + <span class="number">2</span>;</div><div class="line">        System.out.println((a == c));</div><div class="line">        System.out.println((a == e));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>判断以下代码输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeEmployee</span><span class="params">(Person employee)</span> </span>&#123;</div><div class="line">employee = <span class="keyword">new</span> Person();</div><div class="line">employee.age = <span class="number">1000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Person employee = <span class="keyword">new</span> Person();</div><div class="line">employee.age = <span class="number">100</span>;</div><div class="line">changeEmployee(employee);</div><div class="line">System.out.println(employee.age);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;请画出a，b，c，d内存分布图&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] a = &amp;#123; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] b = &amp;#123; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] c = &amp;#123; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] d = &amp;#123; a, b, c &amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>volatile关键字解析[转载]</title>
    <link href="http://yoursite.com/2017/07/16/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90%5B%E8%BD%AC%E8%BD%BD%5D/"/>
    <id>http://yoursite.com/2017/07/16/volatile关键字解析[转载]/</id>
    <published>2017-07-16T12:54:00.000Z</published>
    <updated>2017-10-17T15:15:10.650Z</updated>
    
    <content type="html"><![CDATA[<p> volatile这个关键字可能很多朋友都听说过，或许也都用过。在Java 5之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在Java 5之后，volatile关键字才得以重获生机。</p><p>　　volatile关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于volatile关键字是与Java的内存模型有关的，因此在讲述volatile关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了volatile关键字的实现原理，最后给出了几个使用volatile关键字的场景。</p><p>　　以下是本文的目录大纲：<br>　　一.内存模型的相关概念<br>　　二.并发编程中的三个概念<br>　　三.Java内存模型<br>　　四.深入剖析volatile关键字<br>　　五.使用volatile关键字的场景<br>　　若有不正之处请多多谅解，并欢迎批评指正。</p><p>　　请尊重作者劳动成果，转载请标明原文链接：<br>　　<a href="http://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3920373.html</a></p><a id="more"></a><h3 id="内存模型的相关概念"><a href="#内存模型的相关概念" class="headerlink" title="内存模型的相关概念"></a>内存模型的相关概念</h3><p>大家都知道，计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。</p><p>　　也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：<br><code>i = i + 1;</code></p><p> 　　当线程执行这个语句时，会先从主存当中读取i的值，然后复制一份到高速缓存当中，然后CPU执行指令对i进行加1操作，然后将数据写入高速缓存，最后将高速缓存中i最新的值刷新到主存当中。</p><p>　　这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核CPU中，每条线程可能运行于不同的CPU中，因此每个线程运行时有自己的高速缓存（对单核CPU来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核CPU为例。</p><p>　　比如同时有2个线程执行这段代码，假如初始时i的值为0，那么我们希望两个线程执行完之后i的值变为2。但是事实会是这样吗？</p><p>　　可能存在下面一种情况：初始时，两个线程分别读取i的值存入各自所在的CPU的高速缓存当中，然后线程1进行加1操作，然后把i的最新值1写入到内存。此时线程2的高速缓存当中i的值还是0，进行加1操作之后，i的值为1，然后线程2把i的值写入内存。</p><p>　　最终结果i的值是1，而不是2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。</p><p>　　也就是说，如果一个变量在多个CPU中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。</p><p>　　为了解决缓存不一致性问题，通常来说有以下2种解决方法：</p><p>　　1）通过在总线加LOCK#锁的方式</p><p>　　2）通过缓存一致性协议</p><p>　　这2种方式都是硬件层面上提供的方式。</p><p>　　在早期的CPU当中，是通过在总线上加LOCK#锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了LCOK#锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从变量i所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。</p><p>　　但是上面的方式会有一个问题，由于在锁住总线期间，其他CPU无法访问内存，导致效率低下。</p><p>　　所以就出现了缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><p><img src="http://ow3s1jp4x.bkt.clouddn.com/images/20170716/212219343783699.jpg" alt="这里写图片描述"></p><h3 id="并发编程中的三个概念"><a href="#并发编程中的三个概念" class="headerlink" title="并发编程中的三个概念"></a>并发编程中的三个概念</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>　原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><p>　　一个很经典的例子就是银行账户转账问题：</p><p>　　比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。</p><p>　　试想一下，如果这2个操作不具备原子性，会造成什么样的后果。假如从账户A减去1000元之后，操作突然中止。然后又从B取出了500元，取出500元之后，再执行 往账户B加上1000元 的操作。这样就会导致账户A虽然减去了1000元，但是账户B没有收到这个转过来的1000元。</p><p>　　所以这2个操作必须要具备原子性才能保证不出现一些意外的问题。</p><p>　　同样地反映到并发编程中会出现什么结果呢？</p><p>　　举个最简单的例子，大家想一下假如为一个32位的变量赋值过程不具备原子性的话，会发生什么后果？<br><code>i = 9;</code><br> 　　假若一个线程执行到这个语句时，我暂且假设为一个32位的变量赋值包括两个过程：为低16位赋值，为高16位赋值。</p><p>　　那么就可能发生一种情况：当将低16位数值写入之后，突然被中断，而此时又有一个线程去读取i的值，那么读取到的就是错误的数据。</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程1执行的代码</span></div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">i = <span class="number">10</span>;</div><div class="line"> </div><div class="line"><span class="comment">//线程2执行的代码</span></div><div class="line">j = i;</div></pre></td></tr></table></figure><p>假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i =10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。</p><p>　　此时线程2执行 j = i，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10.</p><p>　　这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;              </div><div class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">i = <span class="number">1</span>;                <span class="comment">//语句1  </span></div><div class="line">flag = <span class="keyword">true</span>;          <span class="comment">//语句2</span></div></pre></td></tr></table></figure></p><p>上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。</p><p>　　下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p><p>　　比如上面的代码中，语句1和语句2谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句2先执行而语句1后执行。</p><p>　　但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">10</span>;    <span class="comment">//语句1</span></div><div class="line"><span class="keyword">int</span> r = <span class="number">2</span>;    <span class="comment">//语句2</span></div><div class="line">a = a + <span class="number">3</span>;    <span class="comment">//语句3</span></div><div class="line">r = a*a;     <span class="comment">//语句4</span></div></pre></td></tr></table></figure></p><p>这段代码有4个语句，那么可能的一个执行顺序是：</p><p><img src="http://ow3s1jp4x.bkt.clouddn.com/images/20170716/212305263939989.jpg" alt="这里写图片描述"></p><p>那么可不可能是这个执行顺序呢： 语句2   语句1    语句4   语句3</p><p>　　不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。</p><p>　　虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程1:</span></div><div class="line">context = loadContext();   <span class="comment">//语句1</span></div><div class="line">inited = <span class="keyword">true</span>;             <span class="comment">//语句2</span></div><div class="line"> </div><div class="line"><span class="comment">//线程2:</span></div><div class="line"><span class="keyword">while</span>(!inited )&#123;</div><div class="line">  sleep()</div><div class="line">&#125;</div><div class="line">doSomethingwithconfig(context);</div></pre></td></tr></table></figure><p>上面代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此时线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。</p><p> 　　从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</p><p>　　也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p><h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><p>在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下Java内存模型，研究一下Java内存模型为我们提供了哪些保证以及在java中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。</p><p>　　在Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。那么Java内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在java内存模型中，也会存在缓存一致性问题和指令重排序的问题。</p><p>　　Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p><p>　　举个简单的例子：在java中，执行下面这个语句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i  = <span class="number">10</span>;</div></pre></td></tr></table></figure></p><p> 　　执行线程必须先在自己的工作内存中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。</p><p>　　那么Java语言 本身对 原子性、可见性以及有序性提供了哪些保证呢？</p><h4 id="原子性-1"><a href="#原子性-1" class="headerlink" title="原子性"></a>原子性</h4><p>　在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p><p>　　上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子i：</p><p>　　请分析以下哪些操作是原子性操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">10</span>;         <span class="comment">//语句1</span></div><div class="line">y = x;         <span class="comment">//语句2</span></div><div class="line">x++;           <span class="comment">//语句3</span></div><div class="line">x = x + <span class="number">1</span>;     <span class="comment">//语句4</span></div></pre></td></tr></table></figure></p><p>咋一看，有些朋友可能会说上面的4个语句中的操作都是原子性操作。其实只有语句1是原子性操作，其他三个语句都不是原子性操作。</p><p>　　语句1是直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。</p><p>　　语句2实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。</p><p>　　同样的，x++和 x = x+1包括3个操作：读取x的值，进行加1操作，写入新的值。</p><p> 　　所以上面4个语句只有语句1的操作具备原子性。</p><p>　　也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。</p><p>　　不过这里有一点需要注意：在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的JDK中，JVM已经保证对64位数据的读取和赋值也是原子性操作了。</p><p>　　从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p><h4 id="可见性-1"><a href="#可见性-1" class="headerlink" title="可见性"></a>可见性</h4><p>对于可见性，Java提供了volatile关键字来保证可见性。</p><p>　　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p><p>　　而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p><p>　　另外，通过synchronized和Lock也能够保证可见性(修饰共享变量的setter or getter)，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p><h4 id="有序性-1"><a href="#有序性-1" class="headerlink" title="有序性"></a>有序性</h4><p>　在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p><p>　　在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p><p>　　另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p><p>　　下面就来具体介绍下happens-before原则（先行发生原则）：</p><p>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作<br>锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作<br>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作<br>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C<br>线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作<br>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生<br>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行<br>对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始<br>　　这8条原则摘自《深入理解Java虚拟机》。<br>　　这8条规则中，前4条规则是比较重要的，后4条规则都是显而易见的。<br>　　下面我们来解释一下前4条规则：</p><p>　　对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到“书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。</p><p>　　第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行lock操作。</p><p>　　第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p><p>　　第四条规则实际上就是体现happens-before原则具备传递性。</p><h3 id="深入剖析volatile关键字"><a href="#深入剖析volatile关键字" class="headerlink" title="深入剖析volatile关键字"></a>深入剖析volatile关键字</h3><p>在前面讲述了很多东西，其实都是为讲述volatile关键字作铺垫，那么接下来我们就进入主题。</p><h4 id="volatile关键字的两层语义"><a href="#volatile关键字的两层语义" class="headerlink" title="volatile关键字的两层语义"></a>volatile关键字的两层语义</h4><p>　　一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p><p>　　1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</p><p>　　2）禁止进行指令重排序。</p><p>　　先看一段代码，假如线程1先执行，线程2后执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程1</span></div><div class="line"><span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">while</span>(!stop)&#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//线程2</span></div><div class="line">stop = <span class="keyword">true</span>;</div></pre></td></tr></table></figure></p><p>这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。</p><p>　　下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将stop变量的值拷贝一份放在自己的工作内存当中。</p><p>　　那么当线程2更改了stop变量的值之后，但是还没来得及写入主存当中，线程2转去做其他事情了，那么线程1由于不知道线程2对stop变量的更改，因此还会一直循环下去。</p><p>　　但是用volatile修饰之后就变得不一样了：</p><p>　　第一：使用volatile关键字会强制将修改的值立即写入主存；</p><p>　　第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p><p>　　第三：由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。</p><p>　　那么在线程2修改stop值时（当然这里包括2个操作，修改线程2工作内存中的值，然后将修改后的值写入内存），会使得线程1的工作内存中缓存变量stop的缓存行无效，然后线程1读取时，发现自己的缓存行无效，它会等待缓存行对应的主存地址被更新之后，然后去对应的主存读取最新的值。</p><p>　　那么线程1读取到的就是最新的正确的值。</p><h4 id="volatile保证原子性吗？"><a href="#volatile保证原子性吗？" class="headerlink" title="volatile保证原子性吗？"></a>volatile保证原子性吗？</h4><p>　　从上面知道volatile关键字保证了操作的可见性，但是volatile能保证对变量的操作是原子性吗？</p><p>　　下面看一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc = <span class="number">0</span>;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        inc++;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</div><div class="line">                        test.increase();</div><div class="line">                &#125;;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></div><div class="line">            Thread.yield();</div><div class="line">        System.out.println(test.inc);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>大家想一下这段程序的输出结果是多少？也许有些朋友认为是10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于10000的数字。</p><p>　　可能有的朋友就会有疑问，不对啊，上面是对变量inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值啊，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000*10=10000。</p><p>　　这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。</p><p>　　在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：</p><p>　　假如某个时刻变量inc的值为10，</p><p>　　线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；</p><p>　　然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。</p><p>　　然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。</p><p>　　那么两个线程分别进行了一次自增操作后，inc只增加了1。</p><p>　　解释到这里，可能有朋友会有疑问，不对啊，前面不是保证一个变量在修改volatile变量时，会让缓存行无效吗？然后其他线程去读就会读到新的值，对，这个没错。这个就是上面的happens-before规则中的volatile变量规则，但是要注意，线程1对变量进行读取操作之后，被阻塞了的话，并没有对inc值进行修改。然后虽然volatile能保证线程2对变量inc的值读取是从内存中读取的，但是线程1没有进行修改，所以线程2根本就不会看到修改的值。</p><p>　　根源就在这里，自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的。</p><p>　　把上面的代码改成以下任何一种都可以达到效果：</p><p>　　采用synchronized：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        inc++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</div><div class="line">                        test.increase();</div><div class="line">                &#125;;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></div><div class="line">            Thread.yield();</div><div class="line">        System.out.println(test.inc);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>采用Lock：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</div><div class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inc++;</div><div class="line">        &#125; <span class="keyword">finally</span>&#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</div><div class="line">                        test.increase();</div><div class="line">                &#125;;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></div><div class="line">            Thread.yield();</div><div class="line">        System.out.println(test.inc);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>采用AtomicInteger：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span>  AtomicInteger inc = <span class="keyword">new</span> AtomicInteger();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        inc.getAndIncrement();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</div><div class="line">                        test.increase();</div><div class="line">                &#125;;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></div><div class="line">            Thread.yield();</div><div class="line">        System.out.println(test.inc);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在java 1.5的java.util.concurrent.atomic包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。</p><h4 id="volatile能保证有序性吗？"><a href="#volatile能保证有序性吗？" class="headerlink" title="volatile能保证有序性吗？"></a>volatile能保证有序性吗？</h4><p>　　在前面提到volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。</p><p>　　volatile关键字禁止指令重排序有两层意思：</p><p>　　1）当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；</p><p>　　2）在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。</p><p>　　可能上面说的比较绕，举个简单的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//x、y为非volatile变量</span></div><div class="line"><span class="comment">//flag为volatile变量</span></div><div class="line"> </div><div class="line">x = <span class="number">2</span>;        <span class="comment">//语句1</span></div><div class="line">y = <span class="number">0</span>;        <span class="comment">//语句2</span></div><div class="line">flag = <span class="keyword">true</span>;  <span class="comment">//语句3</span></div><div class="line">x = <span class="number">4</span>;         <span class="comment">//语句4</span></div><div class="line">y = -<span class="number">1</span>;       <span class="comment">//语句5</span></div></pre></td></tr></table></figure></p><p>由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。</p><p>　　并且volatile关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。</p><p>　　那么我们回到前面举的一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程1:</span></div><div class="line">context = loadContext();   <span class="comment">//语句1</span></div><div class="line">inited = <span class="keyword">true</span>;             <span class="comment">//语句2</span></div><div class="line"> </div><div class="line"><span class="comment">//线程2:</span></div><div class="line"><span class="keyword">while</span>(!inited )&#123;</div><div class="line">  sleep()</div><div class="line">&#125;</div><div class="line">doSomethingwithconfig(context);</div></pre></td></tr></table></figure></p><p>前面举这个例子的时候，提到有可能语句2会在语句1之前执行，那么久可能导致context还没被初始化，而线程2中就使用未初始化的context去进行操作，导致程序出错。</p><p>　　这里如果用volatile关键字对inited变量进行修饰，就不会出现这种问题了，因为当执行到语句2时，必定能保证context已经初始化完毕。</p><h4 id="volatile的原理和实现机制"><a href="#volatile的原理和实现机制" class="headerlink" title="volatile的原理和实现机制"></a>volatile的原理和实现机制</h4><p>前面讲述了源于volatile关键字的一些使用，下面我们来探讨一下volatile到底如何保证可见性和禁止指令重排序的。</p><p>　　下面这段话摘自《深入理解Java虚拟机》：</p><p>　　“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</p><p>　　lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：</p><p>　　1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</p><p>　　2）它会强制将对缓存的修改操作立即写入主存；</p><p>　　3）如果是写操作，它会导致其他CPU中对应的缓存行无效。</p><h3 id="使用volatile关键字的场景"><a href="#使用volatile关键字的场景" class="headerlink" title="使用volatile关键字的场景"></a>使用volatile关键字的场景</h3><p>synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件：</p><p>　　1）对变量的写操作不依赖于当前值</p><p>　　2）该变量没有包含在具有其他变量的不变式中</p><p>　　实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。</p><p>　　事实上，我的理解就是上面的2个条件需要保证操作是原子性操作，才能保证使用volatile关键字的程序在并发时能够正确执行。</p><p>　　下面列举几个Java中使用volatile的几个场景。</p><h4 id="状态标记量"><a href="#状态标记量" class="headerlink" title="状态标记量"></a>状态标记量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"> </div><div class="line"><span class="keyword">while</span>(!flag)&#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">()</span> </span>&#123;</div><div class="line">    flag = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> inited = <span class="keyword">false</span>;</div><div class="line"><span class="comment">//线程1:</span></div><div class="line">context = loadContext();  </div><div class="line">inited = <span class="keyword">true</span>;            </div><div class="line"> </div><div class="line"><span class="comment">//线程2:</span></div><div class="line"><span class="keyword">while</span>(!inited )&#123;</div><div class="line">sleep()</div><div class="line">&#125;</div><div class="line">doSomethingwithconfig(context);</div></pre></td></tr></table></figure><h4 id="double-check"><a href="#double-check" class="headerlink" title="double check"></a>double check</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)</div><div class="line">                    instance = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>至于为何需要这么写请参考：</p><p><a href="http://www.iteye.com/topic/652440" target="_blank" rel="external">单例模式与双重检测</a><br><a href="http://blog.csdn.net/dl88250/article/details/5439024" target="_blank" rel="external">Java 中的双重检查（Double-Check）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; volatile这个关键字可能很多朋友都听说过，或许也都用过。在Java 5之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在Java 5之后，volatile关键字才得以重获生机。&lt;/p&gt;
&lt;p&gt;　　volatile关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于volatile关键字是与Java的内存模型有关的，因此在讲述volatile关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了volatile关键字的实现原理，最后给出了几个使用volatile关键字的场景。&lt;/p&gt;
&lt;p&gt;　　以下是本文的目录大纲：&lt;br&gt;　　一.内存模型的相关概念&lt;br&gt;　　二.并发编程中的三个概念&lt;br&gt;　　三.Java内存模型&lt;br&gt;　　四.深入剖析volatile关键字&lt;br&gt;　　五.使用volatile关键字的场景&lt;br&gt;　　若有不正之处请多多谅解，并欢迎批评指正。&lt;/p&gt;
&lt;p&gt;　　请尊重作者劳动成果，转载请标明原文链接：&lt;br&gt;　　&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3920373.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/dolphin0520/p/3920373.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>传统定时器技术</title>
    <link href="http://yoursite.com/2017/07/16/%E4%BC%A0%E7%BB%9F%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/07/16/传统定时器技术/</id>
    <published>2017-07-16T09:00:00.000Z</published>
    <updated>2017-10-17T15:15:33.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传统定时器技术"><a href="#传统定时器技术" class="headerlink" title="传统定时器技术"></a>传统定时器技术</h2><h3 id="5秒后爆炸-然后每隔3秒爆炸一次"><a href="#5秒后爆炸-然后每隔3秒爆炸一次" class="headerlink" title="5秒后爆炸,然后每隔3秒爆炸一次"></a>5秒后爆炸,然后每隔3秒爆炸一次</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTimer01</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 面向对象的方式思考：一个定时器实例，拥有计划schedule方法，具体的任务由TimerTask实现.</div><div class="line"> */</div><div class="line"><span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" !!!bombing!!! "</span>);</div><div class="line">&#125;</div><div class="line">&#125;, <span class="number">5000</span>, <span class="number">3000</span>);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + Calendar.getInstance().get(Calendar.SECOND));</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Thread.sleep(<span class="number">1000</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">main <span class="number">27</span></div><div class="line">main <span class="number">28</span></div><div class="line">main <span class="number">29</span></div><div class="line">main <span class="number">30</span></div><div class="line">main <span class="number">31</span></div><div class="line">Timer-<span class="number">0</span> !!!bombing!!! </div><div class="line">main <span class="number">32</span></div><div class="line">main <span class="number">33</span></div><div class="line">main <span class="number">34</span></div><div class="line">Timer-<span class="number">0</span> !!!bombing!!! </div><div class="line">main <span class="number">35</span></div><div class="line">main <span class="number">36</span></div><div class="line">main <span class="number">37</span></div><div class="line">Timer-<span class="number">0</span> !!!bombing!!! </div><div class="line">main <span class="number">38</span></div><div class="line">main <span class="number">39</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传统定时器技术&quot;&gt;&lt;a href=&quot;#传统定时器技术&quot; class=&quot;headerlink&quot; title=&quot;传统定时器技术&quot;&gt;&lt;/a&gt;传统定时器技术&lt;/h2&gt;&lt;h3 id=&quot;5秒后爆炸-然后每隔3秒爆炸一次&quot;&gt;&lt;a href=&quot;#5秒后爆炸-然后每隔3秒爆炸一次&quot; class=&quot;headerlink&quot; title=&quot;5秒后爆炸,然后每隔3秒爆炸一次&quot;&gt;&lt;/a&gt;5秒后爆炸,然后每隔3秒爆炸一次&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testTimer01&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 * 面向对象的方式思考：一个定时器实例，拥有计划schedule方法，具体的任务由TimerTask实现.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Timer().schedule(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TimerTask() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		    System.out.println(Thread.currentThread().getName() + &lt;span class=&quot;string&quot;&gt;&quot; !!!bombing!!! &quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;, &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    System.out.println(Thread.currentThread().getName() + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + Calendar.getInstance().get(Calendar.SECOND));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>传统线程技术</title>
    <link href="http://yoursite.com/2017/07/16/%E4%BC%A0%E7%BB%9F%E7%BA%BF%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/07/16/传统线程技术/</id>
    <published>2017-07-16T08:59:00.000Z</published>
    <updated>2017-10-17T15:15:45.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建并启动一个线程"><a href="#创建并启动一个线程" class="headerlink" title="创建并启动一个线程"></a>创建并启动一个线程</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Thread thd01 = <span class="keyword">new</span> Thread(<span class="string">"thd01"</span>) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"the Thread "</span> + Thread.currentThread().getName() + <span class="string">" is executing."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    thd01.start();</div><div class="line">    System.out.println(<span class="string">"the Thread "</span> + Thread.currentThread().getName() + <span class="string">" is executing."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Thread thd02 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"the Thread "</span> + Thread.currentThread().getName() + <span class="string">" is executing."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    thd02.setName(<span class="string">"thd02"</span>);</div><div class="line">    thd02.start();</div><div class="line">    System.out.println(<span class="string">"the Thread "</span> + Thread.currentThread().getName() + <span class="string">" is executing."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="判断输出结果"><a href="#判断输出结果" class="headerlink" title="判断输出结果"></a>判断输出结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"the Thread01 "</span> + Thread.currentThread().getName() + <span class="string">" is executing."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;) &#123;</div><div class="line">        <span class="comment">/** 覆盖了Runnable中定义的方run() */</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"the Thread02 "</span> + Thread.currentThread().getName() + <span class="string">" is executing."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建并启动一个线程&quot;&gt;&lt;a href=&quot;#创建并启动一个线程&quot; class=&quot;headerlink&quot; title=&quot;创建并启动一个线程&quot;&gt;&lt;/a&gt;创建并启动一个线程&lt;/h2&gt;&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Thread thd01 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;string&quot;&gt;&quot;thd01&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;the Thread &quot;&lt;/span&gt; + Thread.currentThread().getName() + &lt;span class=&quot;string&quot;&gt;&quot; is executing.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    thd01.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;the Thread &quot;&lt;/span&gt; + Thread.currentThread().getName() + &lt;span class=&quot;string&quot;&gt;&quot; is executing.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
